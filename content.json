[{"title":"Trie 树","date":"2020-03-07T14:29:44.000Z","path":"2020/03/07/2020-03-07-Trie-树/","text":"Trie 树(字典树) 专门处理字符串匹配的数据结构 树的 root 节点不表示意思 其余每个节点，表示字符串中的字符 从根节点到红色节点，表示一个字符串（但是红色节点并不一定是叶子节点） 4.生成 Trie 的过程 代码实现 Trie 树拆解： Trie 树有多个杈 每个树杈都需要快速查找子节点 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152class TrieNode &#123; constructor(data) &#123; this.data = data this.isEndingChar = false this.children = new Array(26) &#125;&#125;class Trie &#123; constructor() &#123; this.root = new TrieNode('/') // 存储无意义字符 &#125; // 往Trie树中插入一个字符串 insert(text) &#123; let node = this.root for (let i = 0; i &lt; text.length; ++i) &#123; const index = text[i].charCodeAt() - 'a'.charCodeAt() if (!node.children[index]) &#123; const newNode = new TrieNode(text[i]) node.children[index] = newNode &#125; node = node.children[index] &#125; node.isEndingChar = true &#125; // 在Trie树中查找一个字符串 find(pattern) &#123; let node = this.root for (let i = 0; i &lt; pattern.length; ++i) &#123; const index = pattern[i].charCodeAt() - 'a'.charCodeAt() if (!node.children[index]) &#123; return false // 不存在pattern &#125; node = node.children[index] &#125; // 不能完全匹配，只是前缀 return node.isEndingChar &#125;&#125;var tree = new Trie()var strs = ['how', 'hi', 'her', 'hello', 'so', 'see']for (let str of strs) &#123; tree.insert(str)&#125;for (let str of strs) &#123; console.log(tree.find(str))&#125;console.log(tree.find('world')) Trie 树存在的问题： 使用数组存储子节点指针，会占用更多的内存空间，尤其是字符集比较大的时候，插入和查找效率都会降低 字符串前缀重合的多，才能节省空间 手动实现工业级容易出bug 指针非连续存储，对缓存优化不好 比较适合的场景是：搜索时候的联想功能","tags":[{"name":"技术，数据结构，算法","slug":"技术，数据结构，算法","permalink":"http://yoursite.com/tags/技术，数据结构，算法/"}]},{"title":"字符串(KMP算法)-3","date":"2020-03-04T07:47:24.000Z","path":"2020/03/04/2020-03-04字符串-3/","text":"KMP 算法：在模式串与主串比较过程中，当遇到坏字符时，匹配成功的好前缀，如何最大程度向后滑动 拆解： 找到坏字符下标 j 坏字符前面的子串，是好前缀 需要好前缀(模式串与主串匹配部分)滑动最多 滑动计算，只关心模式串，就可以了(此时是好前缀) 所有模式串前缀子串，与后缀子串匹配 得到最长的前缀子串，最长后缀子串，以及最长前缀子串的下标 j’ 此时下一个需要匹配的字符位置(模式串中)就是 j = j’ + 1 拆解模式串 next 算法： 第一个字符无匹配 下标为 -1 核心概念是 上次匹配到的字符下标 再接着向后比较 如果相等，那 k 值增加 1 上次匹配到的字符下标 再接着向后比较 如果不相等 pattern[k + 1] != pattern[i]此时我们知道 pattern[k] != pattern[i-1] 因为之前都是匹配的我们在之前匹配过的子串中寻找，即 k = next[k]（次长串），看看接下来的字符能和 pattern[i] 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465/** * 计算next数组 * @param &#123;*&#125; pattern 模式串 * @param &#123;*&#125; pLength 模式串的长度 */function getNext(pattern, pLength) &#123; let next = new Array(pLength) next[0] = -1 // 第一个字符无匹配 下标为 -1 let k = -1 // 以及匹配到的下标 for (let i = 1; i &lt; pLength; ++i) &#123; // 上次匹配到的字符下标 再接着向后比较 如果不相等 pattern[k + 1] != pattern[i] // 此时我们知道 pattern[k] != pattern[i-1] 因为之前都是匹配的 // 我们在之前匹配过的子串中寻找，即k = next[k]（次长串），看看接下来的字符能和pattern[i] while (k != -1 &amp;&amp; pattern[k + 1] != pattern[i]) &#123; k = next[k] &#125; // 核心概念是 上次匹配到的字符下标 再接着向后比较 如果相等，那k值增加1 if (pattern[k + 1] == pattern[i]) &#123; ++k &#125; next[i] = k &#125; return next&#125;/** * kmp 算法 * @param &#123;*&#125; main 主串 * @param &#123;*&#125; pattern 模式串 */function kmp(main, pattern) &#123; // 长度 const mLength = main.length const pLength = pattern.length // 获取next数组 const next = getNext(pattern, pLength) // 模式串下标 let j = 0 for (let i = 0; i &lt; mLength; i++) &#123; // 一直找到 main[i]和 pattern[j] 坏字符 while (j &gt; 0 &amp;&amp; main[i] != pattern[j]) &#123; // j为坏字符下标 // j - 1为好前缀最后一个字符下标 // next[j - 1] 好前缀最长可匹配字符下标 +1是下个要匹配的字符 j = next[j - 1] + 1 // 滑动到最大可滑动的下标 &#125; // 匹配的字符 向后移动 if (main[i] == pattern[j]) &#123; ++j &#125; // 找到匹配模式串的了 if (j === pLength) &#123; return i - pLength + 1 // 得出当前主串中匹配的第一个下标 &#125; &#125; return -1&#125;// ['a', 'b', 'a', 'b', 'a', 'e', 'a', 'b', 'a', 'b', 'a', 'c']// ['a', 'b', 'a', 'b', 'a', 'c']console.log( kmp( ['a', 'b', 'a', 'b', 'a', 'e', 'a', 'b', 'a', 'b', 'a', 'c'], ['a', 'b', 'a', 'b', 'a', 'c'] ))","tags":[{"name":"技术，数据结构，算法","slug":"技术，数据结构，算法","permalink":"http://yoursite.com/tags/技术，数据结构，算法/"}]},{"title":"字符串(BM算法)-2","date":"2020-01-06T09:11:32.000Z","path":"2020/01/06/2020-01-06字符串-2/","text":"BM 算法（Boyer-Moore）简析 在暴力匹配中，我们把主串中子串和模式串一一对比，这样效率低 BM 算法中，当主串字符在模式串中不存在时，我们就跳过这次对比，直接从当前字符的下一个子串开始对比 原理分析 坏字符规则（bad character rule） 当倒序遍历模式串的字符，和主串对应位置字符无法匹配时，就称这个字符为坏字符，如果这个字符在模式串中没有，那主串匹配位置，移到当前字符后 在模式串中无法匹配的字符小标记为 xi，在模式串中找当前主串字符，下标为 si（找到多个取最后一个，防止滑动过多），未找到 si 为-1，向后滑动的位置为 xi-si 存在问题，就是 xi-si 可能为负数 好后缀规则（good suffix shift） 主串和模式串倒序匹配，匹配好的子串为 U，当下一个开始不匹配的时候，我们开始向后滑动 滑动到的位置，是模式串的前缀子串和匹配好的子串 U 的最大交集 坏字符和好后缀同时使用，那个计算出的向后滑动多，使用哪个 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081/** * 模式串生成map * @param &#123;*&#125; pattern */const patternMap = &#123;&#125;function generatePMap(pattern) &#123; for (let i = 0; i &lt; pattern.length; i++) &#123; const word = pattern[i] patternMap[word] = i &#125;&#125;const suffix = &#123;&#125;/** * 计算模式串的前缀和后缀子串 * @param &#123;*&#125; pattern */function generateFixMap(pattern) &#123; for (let i = 0; i &lt; pattern.length; i++) &#123; suffix[i] = -1 &#125; const pLength = pattern.length for (let i = 0; i &lt; pLength - 1; i++) &#123; let j = i // 起始下标 let k = 0 // 长度 while (j &gt;= 0 &amp;&amp; pattern[j] === pattern[pLength - 1 - k]) &#123; --j ++k suffix[k] = j + 1 &#125; &#125;&#125;/** * BM 算法 * @param &#123;*&#125; main 主串 * @param &#123;*&#125; pattern 模式串 */function bm(main, pattern) &#123; // 模式串 generatePMap(pattern) // 前后缀串 generateFixMap(pattern) let i = 0 const mLength = main.length const pLength = pattern.length // 匹配结束边界 while (i &lt;= mLength - pLength) &#123; let j = pLength - 1 for (j; j &gt;= 0; j--) &#123; if (pattern[j] != main[i + j]) &#123; break &#125; &#125; // 匹配成功了 if (j &lt; 0) &#123; return i &#125; //计算坏字符 const k = pLength - 1 - j let move = pLength if (k) &#123; // 模式子串中的存在相同后缀子串 if (suffix[k] != -1) &#123; move = j - suffix[k] + 1 &#125; else &#123; // 这里把好后缀的范围缩小 来查是否存在相同子串 for (let r = j + 2; r &lt; pLength; r++) &#123; if (suffix[pLength - r] === 0) &#123; move = r break &#125; &#125; &#125; &#125; // 计算下标移动 const num = isNaN(patternMap[main[i + j]]) ? -1 : patternMap[main[i + j]] i = i + Math.max(j - num, move) &#125; return -1&#125;console.log(bm(['a', 'b', 'd', 'c', 'b', 'd'], ['c', 'b', 'd']))","tags":[{"name":"技术，数据结构，算法","slug":"技术，数据结构，算法","permalink":"http://yoursite.com/tags/技术，数据结构，算法/"}]},{"title":"字符串","date":"2020-01-06T03:24:34.000Z","path":"2020/01/06/2020-01-06字符串/","text":"BF（Brute Force）算法 中文：暴力匹配算法 主串：在该字符串中查找字符串模式串：在主串中，查找这个字符串 算法： 主串长度 n 模式串长度 m 从 0、1、2… n - m 且长度为 m 的 n - m + 1 个子串进行对比 时间复杂度： n - m +1 个子串比较 m 次，因此复杂度 O((n - m +1) * m) =&gt; O(n * m) 实际比较 BF 常用： 一般字符串长度不会太长，影响不大，另外当比对一旦不一样的时候，就可以停止 实现简单不容易出错 RK 算法 (Rabin-Karp) n -m +1 个子串求 hash 值与模式串的 hash 值比较 当散列冲突时，再比较子串和模式串，需要控制 hash 冲突，要不然就退化成 BF 算法了 时间复杂度： 遍历主串技术 hash 值，复杂度为 n，进行比较 n -m +1 次，因此时间复杂度为 O(n)","tags":[{"name":"技术，数据结构，算法","slug":"技术，数据结构，算法","permalink":"http://yoursite.com/tags/技术，数据结构，算法/"}]},{"title":"优先搜索","date":"2019-12-31T03:44:06.000Z","path":"2019/12/31/2019-12-31优先搜索/","text":"广度优先搜索 BFS(Breadth-First-Search)含义：地毯式的层层推进搜索，由近及远 定义顶点个数为 V，边数为 E visited 数组，记录已经访问过得顶点，不再次访问 queue 队列，记录刚刚访问的顶点，为了接下来访问此顶点的下一个顶点 prev 数组，用于存储访问记录（反向），找到顶点后，反向遍历就是最短路径 复杂度： 时间： 对于连通图，边数 E 大于等于 顶点数 V - 1 搜索到最后一个顶点，每个顶点，每条边都会被访问，时间复杂度为 O(E + V)，即时间复杂度为 O(V) 空间： visited、queue、prev 大小都和 V 相关，所以最终空间复杂度为 O(V) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152/** * 广度优先搜索 使用 JavaScript 写的伪代码 * @param &#123;*&#125; s 当前顶点 * @param &#123;*&#125; t 目标顶点 * @param &#123;*&#125; v 图的订单数 * @param &#123;*&#125; graph 图 * @param &#123;*&#125; visited 遍历过的顶点 * @param &#123;*&#125; queue 队列 已经被访问，但连接的顶点还没被访问，用于找到下一层节点访问 * @param &#123;*&#125; prev 访问记录，反向的，反向递归，可以打印s =&gt; t 的最短访问记录 */function bfs(s, t) &#123; if (s === t) &#123; return &#125; // 已经访问 const visited = &#123;&#125; visited[s] = true // 队列用于接下来访问 const queue = new Queue() queue.enqueue(s) // 路径数组 const prev = new Array(v).fill(-1) while (queue.length) &#123; // 上个顶点 const lastV = queue.dequeue() // graph[lastV].length 图的下一层的大小 for (let i = 0; i &lt; graph[lastV].length; i++) &#123; // 当前顶点 const nowV = graph[lastV][i] if (!visited[nowV]) &#123; // 路径 prev[nowV] = lastV if (nowV === v) &#123; print(prev, s, v) return &#125; // 记录遍历过 visited[nowV] = true // 入队 queue.enqueue(nowV) &#125; &#125; &#125;&#125;function print(prev, s, t) &#123; // 递归打印s-&gt;t的路径 if (prev[t] != -1 &amp;&amp; t != s) &#123; print(prev, s, prev[t]) &#125; console.log(t + ' ')&#125; 深度优先搜索 DFS (Depth-First-Search)含义：走迷宫，选择一条路走，没路回退，接着换路，知道走到终点 定义顶点个数为 V，边数为 E visited 数组，记录已经访问的顶点，不在继续访问 prev 记录访问顺序，用于得出最短路径 found 已经找到终点之后，不再进行递归 复杂度： 时间： 最多遍历两遍边，所以时间复杂度为 O(E) 空间：visited、prev 和顶点 V 成正比，递归深度不会超过，顶点个数，空间复杂度为：O(V) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546/** * 深度优先搜索 伪代码 * @param &#123;*&#125; startV 起始点 * @param &#123;*&#125; endV 终点 * @param &#123;*&#125; v 顶点个数 * @param &#123;*&#125; visited 访问过 * @param &#123;*&#125; prev 访问路径 * @param &#123;*&#125; graph 图 * */const found = false // 标志找到顶点不再递归function dfs(startV, endV) &#123; const visited = &#123;&#125; const prev = new Array(v).fill(-1) recurDfs(startV, endV, visited, prev) print(prev, startV, endV)&#125;function recurDfs(startV, endV, visited, prev) &#123; if (found) &#123; return &#125; visited[startV] = true if (startV === endV) &#123; found = true return &#125; for (let i = 0; i &lt; graph[startV].length; i++) &#123; if (found) &#123; break &#125; const nowV = graph[startV][i] if (!visited[nowV]) &#123; prev[nowV] = startV recurDfs(nowV, endV, visited, prev) &#125; &#125;&#125;function print(prev, s, t) &#123; // 递归打印s-&gt;t的路径 if (prev[t] != -1 &amp;&amp; t != s) &#123; print(prev, s, prev[t]) &#125; console.log(t + ' ')&#125;","tags":[{"name":"技术，数据结构，算法","slug":"技术，数据结构，算法","permalink":"http://yoursite.com/tags/技术，数据结构，算法/"}]},{"title":"图","date":"2019-12-30T12:37:31.000Z","path":"2019/12/30/2019-12-30图/","text":"图(Graph)概念 顶点（vertex）：图中的每个点 边（edge）：任意两个顶点的连线 顶点的度（degree）：顶点连接的边的数量 方向：边具有方向，这种图叫有向图 出度（out-degree）和入度（in-degree）：顶点指向其他顶点的边数，其他顶点指向当前顶点的边数 带权图（weighted graph）：每条边都有权重 存储邻接矩阵 二维数组存储 无向 a[i][j]和 a[j][i]都存 1 有向 i 指向 j a[i][j]存 1 带权 a[i][j]存权重 优势： 矩阵方便进行数学运算 存储方式简单直接 基于数组，访问顶点关系简单 劣势： 无向图 多存储了一倍的数据 稀疏图 很多空间没用上 邻接表存储方法 有向图 每个顶点，存储指向的顶点 无向图 每个顶点，存储连接的点 优势： 占用空间小 链表可以采用更高效的数据结构，红黑树、平衡二叉树、跳表 劣势： 不利于计算，是用时间换空间","tags":[{"name":"技术，数据结构，算法","slug":"技术，数据结构，算法","permalink":"http://yoursite.com/tags/技术，数据结构，算法/"}]},{"title":"堆应用","date":"2019-12-30T11:47:39.000Z","path":"2019/12/30/2019-12-30堆应用/","text":"优先级队列 按照优先级，优先级高的先出，优先级队列===堆 优先级队列插入数据===堆插入数据，优先级队列取出数据===取出堆顶 应用合并有序小文件 每个小文件取出第一个元素，放入小顶堆 从小顶堆中，取出堆顶放入数组中，并堆化 从堆顶来源文件，接着取出元素放入堆中，并堆化 高性能定时器 对执行任务按照时间，放入堆中 计算堆顶和当前差值，定时器在过差值时间后，再执行任务 避免了轮询，消耗性能 求 Top K 创建 K 大堆 遍历数组，大于堆顶放入，小于继续 最后这个堆就是 Top K 求中位数 把数据分割为两份，小顶堆和大顶堆，并且大顶堆的最大值小于小顶堆的最小值（个数是奇书时大顶堆多一个数） 新入数据，如果小于等于大顶堆的堆顶，测数据插入小顶堆，否则插入大顶堆 维护两个堆的数据平衡，如果大顶堆超过n/2 + 1，取堆顶数据插入小顶堆，反之取小堆顶数据插入大顶堆","tags":[{"name":"技术，数据结构，算法","slug":"技术，数据结构，算法","permalink":"http://yoursite.com/tags/技术，数据结构，算法/"}]},{"title":"堆","date":"2019-12-30T09:20:24.000Z","path":"2019/12/30/2019-12-30堆/","text":"概念 堆是完全二叉树 每个节点大于等于子节点或者小于等于子节点(大顶堆，小顶堆) 堆的实现插入 完全二叉树使用数组存储更方便，从下表 1 开始，左子节点 2 * i，右子节点 2 * i+1 插入数据如果不满足堆的定义，那么堆化，把子节点和父节点数据交换，知道满足堆的要求 删除堆顶元素 把最后一个节点放到堆顶 然后逆向堆化 时间复杂度交换的过程，和树的高度相关，时间复杂度 O(nlogn) 堆排序比快排慢 数据不是连续访问，不利于CPU缓存 堆排序建堆的过程中，会打乱有序度，增加交换次数","tags":[{"name":"技术，数据结构，算法","slug":"技术，数据结构，算法","permalink":"http://yoursite.com/tags/技术，数据结构，算法/"}]},{"title":"2019-12-24递归树","date":"2019-12-24T03:54:25.000Z","path":"2019/12/24/2019-12-24递归树/","text":"概念递归思想中，把大问题分解为小问题，把这个过程画出来，就是一个树，成为递归树 归并排序 归并排序的过程，可以画出一个树 每一层归并的时间近似为 n，假设树的高度为 h，那时间复杂度为 O(n * h) 归并排序树是个满二叉树，那 h 为 log2n，所以时间复杂度为 O(nlogn) 重点 分析出每层时间复杂度 分析出树的形状，计算树的高度","tags":[{"name":"技术，数据结构，算法","slug":"技术，数据结构，算法","permalink":"http://yoursite.com/tags/技术，数据结构，算法/"}]},{"title":"2019-12-23红黑树-2","date":"2019-12-23T10:11:36.000Z","path":"2019/12/23/2019-12-23红黑树-2/","text":"概念 根节点是黑色节点 每个叶子节点是黑色的空节点，不存储数据 任何相邻节点不能同时为红，被黑色节点隔开 每个节点，到其可到达的叶子节点，都包含相同数目的黑色节点 左旋（右旋同理） 围绕某个节点的左旋 2 树右子节点上提转换为 3 树，在左子节点下方，转为 2 树（2-3 树的转换） 怎么维持平衡 左右旋转维持树的左右子树高度相差不大 根据关注节点改变颜色，维持树的颜色平衡","tags":[{"name":"技术，数据结构，算法","slug":"技术，数据结构，算法","permalink":"http://yoursite.com/tags/技术，数据结构，算法/"}]},{"title":"2019-12-23红黑树","date":"2019-12-23T07:03:18.000Z","path":"2019/12/23/2019-12-23红黑树/","text":"平衡二叉查找树 任意一个节点，其左右子树的高度相差不超过 1 很多平衡二叉树，并没有严格遵守这一点 为了解决二叉查找树，在动态插入、删除等动态更新下，退化成为链表 只要树的高度，不比 log2n 大很多，还保留在指数级，就是一个合格的平衡二叉查找树 红黑树(R-B Tree) 根节点是黑色 任何叶子节点都是黑色空节点，不存储数据 任何相邻节点都不能为红色，必须黑色隔开 每个节点，到达其叶子节点的任意路径，黑色节点个数相同 高度分析 去掉红色节点，黑色节点构成的树，最多变成四叉树 根据每条路径黑色节点个数相同，从叶子节点取出节点放到节点下，可组成完全二叉树 完全二叉树高度近似 log2n，黑色二叉树高度近似 log2n 红色节点被黑色节点隔开，每一个红色节点，对应一个黑色节点，那红色二叉树的高度近似 log2n 整体高度近似 2log2n 为何使用红黑树 AVL 完全平衡，查找很高效，但是为了维持平衡，需要在插入和删除，都需要调整 红黑树查找、插入、删除，性能都比较稳定，适用于工程 动态数据结构对比散列表：插入删除查找都是 O(1), 是最常用的，但其缺点是不能顺序遍历以及扩容缩容的性能损耗。适用于那些不需要顺序遍历，数据更新不那么频繁的。 跳表：插入删除查找都是 O(logn), 并且能顺序遍历。缺点是空间复杂度 O(n)。适用于不那么在意内存空间的，其顺序遍历和区间查找非常方便。 红黑树：插入删除查找都是 O(logn), 中序遍历即是顺序遍历，稳定。缺点是难以实现，去查找不方便。其实跳表更佳，但红黑树已经用于很多地方了。","tags":[{"name":"技术，数据结构，算法","slug":"技术，数据结构，算法","permalink":"http://yoursite.com/tags/技术，数据结构，算法/"}]},{"title":"二叉树搜索树","date":"2019-12-23T03:07:02.000Z","path":"2019/12/23/2019-12-23二叉树搜索树/","text":"二叉搜索树(Binary Search Tree)查找实现12345678910111213function findNode(data) &#123; const p = tree while (p !== null &amp;&amp; p !== undefined) &#123; if (p.data === data) &#123; return p &#125; else if (p.data &lt; data) &#123; p = p.left &#125; else &#123; p = p.right &#125; &#125; return null&#125; 插入实现123456789101112131415161718function insertNode(data) &#123; const p = tree while (p !== null &amp;&amp; p !== undefined) &#123; if (data &gt; p.data) &#123; if (p.right === null || p.right === undefined) &#123; p.right = new Node(data) return &#125; p = p.right &#125; else &#123; if (p.left === null || p.left === undefined) &#123; p.left = new Node(data) return &#125; p = p.left &#125; &#125;&#125; 删除实现1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253function deleteNode(data) &#123; let p = tree // 指向删除节点 let pp // 指向删除节点的父节点 // 找到要删除节点 while (p !== null &amp;&amp; p !== undefined &amp;&amp; p.data !== data) &#123; pp = p if (p.data &lt; data) &#123; p = p.right &#125; else &#123; p = p.left &#125; &#125; // 删除节点不存在 if (p === null || p === undefined) &#123; return &#125; // 左右节点都存在 此时找右子树最小的节点 if ( p.left !== null &amp;&amp; p.left !== undefined &amp;&amp; p.right !== null &amp;&amp; p.right !== undefined ) &#123; let minP = p.right // 最小右树子节点 let minPP = p // 最小右树子节点的父节点 while (mimP.left !== null &amp;&amp; minP.left !== undefined) &#123; minPP = minP minP = mimP.left &#125; // 数据替换完成 p.data = minP.data // 删除最小节点 p = minP pp = minPP &#125; let child // 删除节点是叶子节点或者只有一个子节点 if (p.left !== null || p.left !== undefined) &#123; child = p.left &#125; else if (p.right !== null || p.right !== undefined) &#123; child = p.right &#125; else &#123; child = null &#125; if (pp === null || pp === undefined) &#123; tree = child // 删除根节点 &#125; else if (pp.left === p) &#123; pp.left = child &#125; else &#123; pp.right = child &#125;&#125; 时间复杂度查找: O(logn)插入: O(logn)删除: O(logn) 当特殊时间会退化成 O(n)的复杂度 和散列表比较 对比 散列表 二叉树查找树 是否有序 无序存储，还需再次排序 有序，中序遍历就可以 O(n)输出有序数据 性能 需要动态扩容，散列冲突需要考虑，性能不稳定 不需要扩容，二叉查找时有可能性能不平衡，但是平衡二叉查找树，性能很平衡，稳定在 O(logn) 时间复杂度 常量级别，但因为冲突因子存在，常量并不一定小，加上哈希函数的耗时，可能更长 稳定在 O(logn)可能比常量级更小 实现复杂度 考虑扩容、缩容、散列冲突，比较复杂 只需要考虑平衡性","tags":[{"name":"技术，数据结构，算法","slug":"技术，数据结构，算法","permalink":"http://yoursite.com/tags/技术，数据结构，算法/"}]},{"title":"二叉树基础","date":"2019-12-20T03:17:02.000Z","path":"2019/12/20/2019-12-20二叉树基础/","text":"概念 高度：从叶子节点到当前节点 深度：从根节点到当前节点 层数：和深度类似，深度+1 二叉树 (Binary Tree) 每个节点最多有两个子节点 左子节点和右子节点 二叉树分类 完美二叉树（Perfect Binary Tree）：除了叶子节点，都有左右子节点，且每一层都被填满 满二叉树（Full Binary Tree）：除了叶子节点，都有左右子节点 完全二叉树（Complete Binary Tree）：除了最后一层，其它层都被填满，且最后一层左对齐 链式存储每个节点储存数据，和左右子节点的指针 数组存储根节点存储在小标 1（方便接下来计算）,如果当前值存在小标 i，那么 2i 存储左子节点，2i+1 存右子节点 二叉树遍历 前序遍历：自身，左子树，右子树 中序遍历：左子树，自身，右子树 后序遍历：左子树，右子树，自身 12345678910111213141516171819202122232425262728// 伪代码// 前序function preOrder(node) &#123; if (!node) &#123; return &#125; console.log(node) // 打印自身 preOrder(node.left) // 左 preOrder(node.right) // 右&#125;// 中序function inOrder(node) &#123; if (!node) &#123; return &#125; inOrder(node.left) // 左 console.log(node) // 打印自身 inOrder(node.right) // 右&#125;// 后序function postOrder(node) &#123; if (!node) &#123; return &#125; postOrder(node.left) // 左 postOrder(node.right) // 右 console.log(node) // 打印自身&#125; 每个节点最多遍历两次 时间复杂度 O(n)","tags":[{"name":"技术，数据结构，算法","slug":"技术，数据结构，算法","permalink":"http://yoursite.com/tags/技术，数据结构，算法/"}]},{"title":"哈希算法","date":"2019-12-16T08:54:48.000Z","path":"2019/12/16/2019-12-16哈希算法/","text":"哈希算法 单向算法，不能从哈希值，推到出原始数据 数据敏感，原始值很小的差距，hash 值可以很大改变 hash 冲突小，不同的值得出的 hash 值，冲突的概率很小 高效，很长的文本也能很快算出 hash 值 应用 数据加密 MD5、SHA、DES、AES 反向推到数据可能小 散列冲突小 唯一标识 对图片做唯一标识，方便的识别图片，处理版权问题 数据校验 先得到数据的 hash，然后获取数据，计算 hash 值看数据是否改变 散列函数 散列函数对性能的要求比较高，对安全的要求低，所以散列函数一般采用简单的 负载均衡 把用户ip或者id做hash运算，得到的hash值取模，此时的值对应此编号的服务器 数据分片 把数据计算hash值，对机器取模放入对应编号机器 查找的时候一样计算取模，去指定机器查找，这样实现了数据的分片 分布式存储 先数据分片，但是扩容会出问题，需要大量搬移数据 使用一致性hash算法，把hash值区间[0, max]分成小区间 小区间个数远远大于机器个数，当加入机器，把部分区间搬到新机器 区块链 区块链中，区块分为头和体 区块头中会存储上一个区块，和当前区块的 hash 值，计算比较耗时 如果要篡改一个区块，必须把区块后所有的区块全部计算一遍","tags":[{"name":"技术，数据结构，算法","slug":"技术，数据结构，算法","permalink":"http://yoursite.com/tags/技术，数据结构，算法/"}]},{"title":"散列表","date":"2019-12-16T03:24:18.000Z","path":"2019/12/16/2019-12-16散列表/","text":"概念 数组实现随机访问 O(1) 散列函数实现下标对应 散列值 hash 值非负数 相同散列值，结果相同 不同散列值，结果不同（散列冲突） 散列冲突解决： 开放寻址法 线性探测：向后查找空处插入（线性查找） 二次探测法：寻址时使用平方 双重散列：多个散列函数，第一个冲突用第二个 链表法： 散列值相同，放入同一个槽的链表中 装载因子: 填入表的个数/散列表长度 工业级散列表 装载因子过高：动态扩容(避免一次搬移数据消耗太多时间，先扩容数据搬移，在每次查找时完成) 装载因子过低：省内存可以动态缩容 冲突解决分析 开放寻址法：优点：数组存储查找快，方便序列化缺点：冲突代价高，尤其在删除是还需要标记，所以一般装载因子都得小，这样需要更多存储空间总结：数据量小，装载因子小，适合开放寻址 链表法：优点：存储空间利用率更高，转载因子可以更大缺点：链表需要存储指针，需要消耗更多内存空间，内存地址不连续，对CPU缓存不友好总结：适合存储大对象，大量数据","tags":[{"name":"技术，数据结构，算法","slug":"技术，数据结构，算法","permalink":"http://yoursite.com/tags/技术，数据结构，算法/"}]},{"title":"跳表","date":"2019-12-05T04:59:51.000Z","path":"2019/12/05/2019-12-05跳表/","text":"链表加多级索引就是跳表时间复杂度分析 n 个数据，假设每 2 个数据建 1 索引，那第一级索引个数为 n/2，第 k 级索引是 n/2^k 当 k 级索引个数为 2 时，n/2^k = 2，k = log2(n) - 1，加上原始数据，那整个跳表高度为 log2(n) 每 2 个数据一个索引，那每一级遍历最多 3 次，时间复杂度为：O(3*log2(n)) =&gt; O(log(n)) 空间复杂度分析 第一级 n/2 第二级 n/4 第三级 n/8 …等比数列 额外的空间占用 n - 2 当索引建立间隔增加，空间占用会更小 插入和删除 查找的时间复杂度为: O(log(n)) 执行插入的时间复杂度为 O(1) 删除查找的时间复杂度为: O(log(n)) 执行删除的时间复杂度为 O(1)，同时还需要删除索引节点，单链表还需要找到前驱节点 索引动态更新 当插入数据过多时，可能退化为单链表，这时候需要动态更新索引 使用随机函数来插入索引，从 k 级到 1 级执行插入，随机函数要保证插入的数据大小平衡和索引大小平衡","tags":[{"name":"技术，数据结构，算法","slug":"技术，数据结构，算法","permalink":"http://yoursite.com/tags/技术，数据结构，算法/"}]},{"title":"二分查找(2)","date":"2019-12-04T06:22:14.000Z","path":"2019/12/04/2019-12-04二分查找-2/","text":"第一个给定值123456789101112131415161718192021const list = [1, 2, 3, 4, 5, 6, 8, 8, 8, 9, 10]function binarySearchFirst(list = [], value) &#123; let low = 0 let hight = list.length - 1 while (low &lt;= hight) &#123; const middle = Math.floor(hight + (low - hight) / 2) if (list[middle] &gt; value) &#123; hight = middle - 1 &#125; else if (list[middle] &lt; value) &#123; low = middle + 1 &#125; else &#123; if (middle === 0 || list[middle - 1] !== value) &#123; return middle &#125; hight = middle - 1 &#125; &#125; return -1&#125;console.log(binarySearchFirst(list, 8)) 最后一个给定值123456789101112131415161718192021const list = [1, 2, 3, 4, 5, 6, 8, 8, 8, 9, 10]function binarySearchLast(list = [], value) &#123; let low = 0 let hight = list.length - 1 while (low &lt;= hight) &#123; const middle = Math.floor(hight + (low - hight) / 2) if (list[middle] &gt; value) &#123; hight = middle - 1 &#125; else if (list[middle] &lt; value) &#123; low = middle + 1 &#125; else &#123; if (middle === list.length - 1 || list[middle + 1] !== value) &#123; return middle &#125; low = middle + 1 &#125; &#125; return -1&#125;console.log(binarySearchLast(list, 8)) 第一个大于等于给定值12345678910111213141516171819const list = [1, 2, 3, 4, 5, 6, 8, 8, 8, 9, 10]function binarySearchGE(list = [], value) &#123; let low = 0 let hight = list.length - 1 while (low &lt;= hight) &#123; const middle = Math.floor(hight + (low - hight) / 2) if (list[middle] &gt;= value) &#123; if (middle === 0 || list[middle - 1] &lt; value) &#123; return middle &#125; hight = middle - 1 &#125; else &#123; low = middle + 1 &#125; &#125; return -1&#125;console.log(binarySearchGE(list, 8)) 最后一个小于等于给定值12345678910111213141516171819const list = [1, 2, 3, 4, 5, 6, 8, 8, 8, 9, 10]function binarySearchLE(list = [], value) &#123; let low = 0 let hight = list.length - 1 while (low &lt;= hight) &#123; const middle = Math.floor(hight + (low - hight) / 2) if (list[middle] &lt;= value) &#123; if (middle === list.length - 1 || list[middle + 1] &gt; value) &#123; return middle &#125; low = middle + 1 &#125; else &#123; hight = middle - 1 &#125; &#125; return -1&#125;console.log(binarySearchLE(list, 8)) 12345678910111213141516171819202122232425262728293031// 升序排列的循环有序数组const list = [4, 5, 6, 7, 8, 1, 2, 3]function binarySearchCircle(list = [], value) &#123; let low = 0 let high = list.length - 1 while (low &lt;= high) &#123; const middle = Math.floor(high + (low - high) / 2) // 循环有序数组被切割后，会分为有序数组和循环有序数组 if (list[middle] === value) &#123; return middle &#125; if (list[low] &lt;= list[middle]) &#123; // 左侧有序 if (list[middle] &gt;= value &amp;&amp; list[low] &lt;= value) &#123; high = middle - 1 &#125; else &#123; low = middle + 1 &#125; &#125; else &#123; // 右侧有序 if (list[high] &gt;= value &amp;&amp; list[middle] &lt;= value) &#123; low = middle + 1 &#125; else &#123; high = middle - 1 &#125; &#125; &#125; return -1&#125;console.log(binarySearchCircle(list, 8))","tags":[{"name":"技术，数据结构，算法","slug":"技术，数据结构，算法","permalink":"http://yoursite.com/tags/技术，数据结构，算法/"}]},{"title":"二分查找","date":"2019-12-02T11:40:26.000Z","path":"2019/12/02/2019-12-3二分查找/","text":"二分查找 不断地二分区间，快速缩小区间范围 时间复杂度 O(logn) 局限 依赖数组，数组的下标随机访问，时间复杂度 O(1) 依赖有序，如果没序，需要先排序，那时间复杂度就高了（插入和删除操作不频繁的场景） 数据量太小，不需要用，遍历性能也不差，但是比较很耗费性能，那建议使用二分查找，减少比较 数据量不能太大，数组要求连续的内存存储，数据量太大对内存影响太大 123456789101112131415161718// 非递归function binarySearch(list = [], value) &#123; let low = 0 let high = list.length - 1 while (low &lt;= high) &#123; const middle = Math.floor(low + (high - low) / 2) if (list[middle] === value) &#123; return middle &#125; else if (list[middle] &gt; value) &#123; high = middle - 1 &#125; else &#123; low = middle + 1 &#125; &#125; return -1&#125;const list = [1, 2, 3, 4, 5, 6, 8, 10]console.log(binarySearch(list, 7)) 12345678910111213141516171819// 递归function binarySearch(list = [], value) &#123; return bSearch(list, 0, list.length - 1, value)&#125;function bSearch(list, low, high, value) &#123; if (low &gt; high) &#123; return -1 &#125; const middle = Math.floor(low + (high - low) / 2) if (list[middle] === value) &#123; return middle &#125; else if (list[middle] &gt; value) &#123; return bSearch(list, low, middle - 1, value) &#125; else &#123; return bSearch(list, middle + 1, high, value) &#125;&#125;const list = [1, 2, 3, 4, 5, 6, 8, 10]console.log(binarySearch(list, 2)) 12345678910111213141516171819202122// 开方function sqrtBisection(n) &#123; if (n === 0 || n === 1) return n let low = 0 let high = n &lt; 1 ? 1 : n // 使用Number.EPSILON表示能够接受的最小误差范围// const E = Number.EPSILON // 接受的最小误差范围 const E = 0.000001 //指定精度 while (true) &#123; let middle = (low + high) / 2 if (Math.abs(middle * middle - n) &lt;= E) &#123; return middle &#125; if (middle * middle - n &gt; E) &#123; high = middle &#125; else &#123; low = middle &#125; &#125;&#125;console.log('sqrtBisection', sqrtBisection(0.1), Math.sqrt(0.1))","tags":[{"name":"技术，数据结构，算法","slug":"技术，数据结构，算法","permalink":"http://yoursite.com/tags/技术，数据结构，算法/"}]},{"title":"排序(3)","date":"2019-12-02T09:14:21.000Z","path":"2019/12/02/2019-12-2排序-3/","text":"线性排序 时间复杂度为：O(n)桶排序 bucket sort桶排序概念 n 个数据均匀分配到 m 个桶中 每个桶中元素为 k = n / m 对每个桶中的数据进行排序(快速排序 O(klogk)) m 个桶，整个时间福再度 O(m _ klogk) ====(k = n / m)====&gt; O(n _ log(n / m)) 当 n 接近于 m 时，时间复杂度为 O(n) 桶排序局限 桶之间数据要均匀分配，否则排序要退化为快排 桶之间数据要有序，否则再次排序时间复杂度 计数排序 counting sort 可以理解为桶排序的特殊情况，多少个数据，就多少个桶 计数排序只能用在数据范围不大的地方，且数据必须为非负数 123456789101112131415161718192021222324252627282930313233343536let testArr = []let i = 0while (i &lt; 10) &#123; testArr.push(Math.floor(Math.random() * 10)) i++&#125;function counting(list = []) &#123; let max = list[0] list.forEach(num =&gt; &#123; if (num &gt; max) &#123; max = num &#125; &#125;) const countArr = new Array(max + 1).fill(0) list.forEach(num =&gt; &#123; countArr[num]++ &#125;) // 相邻累加 countArr.reduce((pre, cur, i) =&gt; &#123; const plus = pre + cur countArr[i] = plus return plus &#125;, 0) const tempArray = [] // 倒序放值 for (let i = list.length - 1; i &gt;= 0; i--) &#123; // 值 list[i]；计数位置 countArr[list[i]]；转为数组下标 countArr[list[i]] - 1 const index = countArr[list[i]] - 1 tempArray[index] = list[i] countArr[list[i]]-- &#125; return tempArray&#125;console.log(testArr)console.log(counting(testArr)) 基数排序手机号码的例子，按照位去比较，当大的位数不相同时，直接比较就可以得到大小，不用再比较小的位了","tags":[]},{"title":"排序(2)","date":"2019-11-28T10:01:23.000Z","path":"2019/11/28/2019-11-28排序-2/","text":"分治思想 将大的问题分解成小问题，然后分别解决 分治是一种思想，递归是编程技巧 归并排序 merge sort12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849/** * 归并排序 * @param &#123;*&#125; list * 1. 把数组分解到最小 * 2. 然后合并 (有序) * 3. 得到有序数组 * 使用递归，递归公式如下： * mergeSort(list) = merge(mergeSort(listLeft), mergeSort(listRight)) * 终止条件 list &lt;= 1 * 合并：使用两个哨兵从两个数组里面取值，值小的放入临时数组中，然后哨兵后移 */let testArr = []let i = 0while (i &lt; 50) &#123; testArr.push(Math.floor(Math.random() * 1000)) i++&#125;function mergeSort(list) &#123; if (list.length &lt;= 1) &#123; return list &#125; const middle = Math.floor(list.length / 2) const leftArr = list.slice(0, middle) const rightArr = list.slice(middle) return merge(mergeSort(leftArr), mergeSort(rightArr))&#125;function merge(leftArr, rightArr) &#123; const temp = [] let i = 0 let j = 0 let leftLength = leftArr.length let rightLength = rightArr.length while (i &lt; leftLength &amp;&amp; j &lt; rightLength) &#123; if (leftArr[i] &lt;= rightArr[j]) &#123; temp.push(leftArr[i]) i++ &#125; else &#123; temp.push(rightArr[j]) j++ &#125; &#125; return temp.concat(leftArr.slice(i)).concat(rightArr.slice(j))&#125;console.log(mergeSort(testArr))// 稳定排序 merge 里 leftArr[i] &lt;= rightArr[j] 相同值左侧先放就是稳定// 时间复杂度 O(nlogn)// 空间复杂度 O(n) 不是原地排序 快速排序 quick sort12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849let testArr = []let i = 0while (i &lt; 50) &#123; testArr.push(Math.floor(Math.random() * 1000)) i++&#125;/** * 快速排序 * @param &#123;*&#125; list * 递归工时 1. quickSort(p ... r) = quickSort(p ... q - 1) + quickSort(q + 1 ... r) * 终止条件 2. p &gt;= r */function quickSort(list = []) &#123; quick_sort(list, 0, list.length - 1)&#125;function quick_sort(list, p, r) &#123; // 终止条件 if (p &gt;= r) &#123; return &#125; // 分区点 const q = partition(list, p, r) // 递归 quick_sort(list, p, q - 1) quick_sort(list, q + 1, r)&#125;// 分区点function partition(list, p, r) &#123; const pivot = list[r] let i = p for (let j = p; j &lt; r; j++) &#123; if (list[j] &lt; pivot) &#123; if (i !== j) &#123; ;[list[i], list[j]] = [list[j], list[i]] &#125; i++ &#125; &#125; ;[list[i], list[r]] = [list[r], list[i]] return i&#125;console.log(testArr)quickSort(testArr)console.log(testArr)// 非稳定排序// 时间复杂度 O(nlogn)// 空间复杂度 O(1) 原地排序 123456789101112131415161718192021222324252627282930// 获取数组中第k大的元素，利用分区的思想，当分区点 p + 1 === k 时，得到第 K 大（降序排列）function getK(list, k, m, n) &#123; const p = partition(list, m, n) if (p + 1 === k) &#123; return list[p] &#125; else if (p + 1 &gt; k) &#123; return getK(list, k, m, p - 1) &#125; else &#123; return getK(list, k, p + 1, n) &#125;&#125;function partition(list, m, n) &#123; let i = m let pivot = list[n] for (let j = m; j &lt; n; j++) &#123; // 降序排列 if (list[j] &gt; pivot) &#123; if (j != i) &#123; ;[list[j], list[i]] = [list[i], list[j]] &#125; i++ &#125; &#125; ;[list[n], list[i]] = [list[i], list[n]] return i&#125;const list = [1, 2, 3, 4, 5, 6]console.log('k', getK(list, 2, 0, 5), list)","tags":[{"name":"技术，数据结构，算法","slug":"技术，数据结构，算法","permalink":"http://yoursite.com/tags/技术，数据结构，算法/"}]},{"title":"排序","date":"2019-11-28T03:38:06.000Z","path":"2019/11/28/2019-11-28排序/","text":"排序算法的执行效率 最好情况、最坏情况和平均情况时间复杂度 时间复杂度的系数、常数和低阶 比较次数和移动次数 排序算法的内存消耗 原地排序，空间复杂度 O(1) 排序算法的稳定性 相同值经过排序位置不变 有序度 数组中具有有序关系对的个数 满有序度 n * (n - 1) / 2 有序度 = 满有序度 - 逆有序度 排序算法冒泡 bubble sort123456789101112131415161718192021222324252627282930/** * 冒泡排序 * @param &#123;*&#125; list 数组 * 1. 每一次比较相邻两个数的大小，按照比较结果排序 * 2. 经过 n 排序，得到排序结果 * 3. 每次冒泡次数为：j &lt; len - 1 - i ，-1 是相邻比较次数比长度少一次，-i 是因为排过的不用再比较 * 4. 设置标志位，如果一次冒泡没有排序，代表排序完成提前退出 */function bubbleSort(list = []) &#123; const len = list.length for (let i = 0; i &lt; len; i++) &#123; let isExchange = false for (let j = 0; j &lt; len - 1 - i; j++) &#123; if (list[j] &gt; list[j + 1]) &#123; [list[j], list[j + 1]] = [list[j + 1], list[j]] isExchange = true &#125; &#125; if (!isExchange) &#123; break &#125; &#125; return list&#125;console.log(bubbleSort([3, 23, 1, 2, 3, 4]))/** * 1. 原地排序 空间复杂度O(1) * 2. 稳定排序 只有大于时才交换 * 3. 时间复杂度 最好一次冒泡 O(n) 最坏(倒序) O(n^2) 平均 * / 插入 insertion sort123456789101112131415161718192021222324252627/** * 插入排序 * @param &#123;*&#125; list 数组 * 1.遍历有序数组找到插入位置，插入数据 * 2.把数组分为有序数组和无序数组 * 3.插入开始 i = 1 知道数组结束 * 4.遍历有序数组找到插入位置插入，其他数据后移 */function insertionSort(list = []) &#123; for (let i = 1; i &lt; list.length; i++) &#123; const value = list[i] let j = i - 1 for (; j &gt;= 0; j--) &#123; if (value &lt; list[j]) &#123; list[j + 1] = list[j] &#125; else &#123; break &#125; &#125; list[j + 1] = value &#125; return list&#125;console.log(insertionSort([3, 23, 1, 2, 3, 4]))// 原地排序// 稳定排序// 最好O(n) 最坏O(n^2) 平均 O(n^2) 选择 selection sort1234567891011121314151617181920212223/** * 选择排序 * 1.分为排序和未排序部分，未排序部分找出最小值，放到已排序队尾 * @param &#123;*&#125; list 数组 */function selectionSort(list = []) &#123; const len = list.length for (let i = 0; i &lt; len - 1; i++) &#123; let min = i; for (let j = i + 1; j &lt; len; j++) &#123; if (list[min] &gt; list[j]) &#123; min = j &#125; &#125; [list[i], list[min]] = [list[min], list[i]] &#125; return list&#125;console.log(selectionSort([23, 3, 4, 2, 3, 1]))// 原地排序// 非稳定排序// 最好O(n^2) 最坏O(n^2) 平均 O(n^2)","tags":[{"name":"技术，数据结构，算法","slug":"技术，数据结构，算法","permalink":"http://yoursite.com/tags/技术，数据结构，算法/"}]},{"title":"递归","date":"2019-11-27T11:05:38.000Z","path":"2019/11/27/2019-11-27递归/","text":"递归的条件 问题可以分解为子问题 分解后的子问题，除了数据规模不同，解决方法一致 存在递归终止条件，不能存在无限循环 递归关键点 递归公式 终止条件 1234567891011121314151617181920// 走台阶，一次可以走一次或者两次，总共7个台阶，有多少种可能呢？// 1.问题分解：7个台阶可能性可以拆分为，6个台阶的可能性+5个台阶可能性// 2.解法一致：6个台阶和5个台阶，可以接着分解// 3.终止条件：1个和2个台阶时分别有1，2种可能性，可终止// 递归公式// f(n) = f(n-1)+f(n-2)// 终止条件// f(1) = 1// f(2) = 2function f(n) &#123; if (n === 1) &#123; return 1 &#125; if (n === 2) &#123; return 2 &#125; return f(n - 1) + f(n - 2)&#125; 递归难点 不要深入去思考递归过程，我们需要的是推到递归公式和终止条件 警惕堆栈溢出 1234567891011// 伪代码// 全局变量，表示递归的深度。int depth = 0;int f(int n) &#123; ++depth； if (depth &gt; 1000) throw exception; if (n == 1) return 1; return f(n-1) + 1;&#125; 警惕重复计算 12345678910111213141516171819202122232425262728function f(n) &#123; if (n === 1) &#123; return 1 &#125; if (n === 2) &#123; return 2 &#125; return f(n - 1) + f(n - 2)&#125;// f(7) = f(6) + f(5)// f(6) = f(5) + f(4)// 重复计算了f(5)// 代码优化const temp = &#123;&#125;function f(n) &#123; if (n === 1) &#123; return 1 &#125; if (n === 2) &#123; return 2 &#125; if (temp[n]) &#123; return temp[n] &#125; let ret = f(n - 1) + f(n - 2) temp[n] = ret return ret&#125; 调试递归: 打印日志发现，递归值 结合条件断点进行调试","tags":[{"name":"技术，数据结构，算法","slug":"技术，数据结构，算法","permalink":"http://yoursite.com/tags/技术，数据结构，算法/"}]},{"title":"队列","date":"2019-08-06T11:36:30.000Z","path":"2019/08/06/2019-08-06队列/","text":"队列 先进先出，后进后出 数组实现的顺序队列 链表实现的链式队列 普通队列head 头，tail 尾，n 长度空时：head === tail满时：tail === n 循环队列head 头，tail 尾，n 长度空时：head === tail满时：(tail + 1) % n === head 阻塞队列 队列为空时，队头取数据阻塞，直到有数据；队列满时阻塞插入，直到有空间再执行插入 完美的符合 生产者-消费者 模型 当生产者生产数据过多，消费者来不及消费（队列满了），此时生产者阻塞；当消费者消费过多，生产者来不及生产（队列空了），此时消费者阻塞 并发队列当多线程消费队列时，称为并发队列，要保证队列的线程安全，可以加锁","tags":[{"name":"技术，数据结构，算法","slug":"技术，数据结构，算法","permalink":"http://yoursite.com/tags/技术，数据结构，算法/"}]},{"title":"栈","date":"2019-08-05T09:11:51.000Z","path":"2019/08/05/2019-08-05栈/","text":"栈 先进后出，后进先出，只允许在一端插入和删除数据。 数组实现为顺序栈。 链表实现为链式栈。 栈的应用1. 浏览器前进后退栈 1[a, b, c] 栈 2[]后退：栈 1[a, b] 栈 2[c]后退：栈 1[a] 栈 2[b, c]前进：栈 1[a, b] 栈 2[c]新开：栈 1[a, b, d] 栈 2[]（清空） 2. [] 括号匹配我们用栈来保存未匹配的左括号，从左到右依次扫描字符串。当扫描到左括号时，则将其压入栈中；当扫描到右括号时，从栈顶取出一个左括号。匹配继续执行，不匹配非法格式。 3. 表达式求值 问题1.函数调用为何使用栈来实现？答：后入先出（LIFO）的数据结构，和函数嵌套执行顺序天然合适。另外就是函数执行的临时作用域，栈顶生成执行完重置，也很合适。","tags":[{"name":"技术，数据结构，算法","slug":"技术，数据结构，算法","permalink":"http://yoursite.com/tags/技术，数据结构，算法/"}]},{"title":"链表","date":"2019-07-23T11:05:00.000Z","path":"2019/07/23/2019-07-22-链表/","text":"定义 不需要连续内存，通过“指针”将零散的内存块串联起来 分类 单向链表尾节点指向 null 双向链表拥有双向指针，头节点的前节点是 null，尾节点的后节点是 null 循环链表尾节点执向 头节点 双向循环链表拥有双向指针，头节点的前节点是尾节点，尾节点的后节点是头节点 复杂度 插入 O(1) 删除 O(1) 查找 O(n) 知识点1.指针与变量 变量赋值给指针，是把变量的内存地址赋值给了指针 指针保存这个变量的内存地址，此内存地址指向这个变量 2.指针丢失与内存泄露1234567// a.next =&gt; b 此时插入 xa.next = x // 此时a.next 已经改变x.next = a.next // 指针丢失//正确代码x.next = a.next // 先把下个节点赋值a.next = x 3.哨兵 哨兵很有用，尤其在处理边界问题时 4.链表验证 链表为空时 链表只要一个节点时 链表只有两个节点时 处理链表头尾时 5.画图和举列子比如简单的插入值，就可以在图上画出示意图 6.练习题链表练习题 单链表反转 链表中环的检测 两个有序的链表合并 删除链表倒数第 n 个结点 求链表的中间结点 leetcode 对应 206，141，21，19，876","tags":[{"name":"技术，数据结构，算法","slug":"技术，数据结构，算法","permalink":"http://yoursite.com/tags/技术，数据结构，算法/"}]},{"title":"数组","date":"2019-07-22T14:47:03.000Z","path":"2019/07/22/2019-07-22-数组/","text":"线性表数据结构，用连续的内存，来存储相同类型的数据（JavaScript 中的数组比较类型可不同） 线性 线性表：数据连成一条线，并且数据最多只有前后两个方向（数组、链表、队列和栈） 非线性表：可以有多个方向（树、图和堆） 连续内存空间和相同数据类型 连续内存支持随机访问 O(1) 插入 O(n)和删除 O(n)","tags":[{"name":"技术，数据结构，算法","slug":"技术，数据结构，算法","permalink":"http://yoursite.com/tags/技术，数据结构，算法/"}]},{"title":"复杂度分析","date":"2019-07-19T06:22:17.000Z","path":"2019/07/19/2019-07-19-复杂度分析/","text":"大 O 复杂度表示法表示随着数据增加，复杂度的增长趋势 大 O 时间复杂度表示随着数据增加，代码执行时间的增长趋势 只关注执行次数最多的代码 加法法则（只关注量级最大的，比如n^2大于n） 乘法法则（嵌套代码的复杂度，等于嵌套代码复杂度的乘积） 时间复杂度分析 最好情况时间复杂度 最理想情况下，代码执行时间复杂度 最坏情况时间复杂度 最理糟糕情况下，代码执行时间复杂度 平均情况时间复杂度 其实是求加权平均值，即期望值 均摊情况时间复杂度 把时间复杂度高的，均摊到其他复杂度低的操作上，计算出来的时间复杂度 复杂度量级(递增) 常量阶 O(1) 对数阶 O($\\log$n) 线性阶 O(n) 线性对数阶 O(n$\\log$n) 平方阶 O(n^2) 等 指数阶 O(2^n) 阶乘阶 O(n!) 大 O 空间复杂度表示随着数据增加，代码存储空间的增长趋势 （其他类似时间复杂度）","tags":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/tags/技术/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"JavaScript 继承","date":"2019-07-02T09:39:29.000Z","path":"2019/07/02/JavaScript-继承/","text":"","tags":[]},{"title":"node.js 笔记","date":"2018-02-11T06:14:06.000Z","path":"2018/02/11/了不起的-node-js-笔记/","text":"诞生新的 V8 引擎可以嵌到操作系统集成层，Ryan Dahl 看到这个机会，让 JavaScript 可以调用操作系统底层异步接口，实现了将其带到操作系统的目的。 流程安装模块依赖构建应用中间件定义路由监听","tags":[]},{"title":"JavaScript 权威指南","date":"2018-02-08T07:48:05.000Z","path":"2018/02/08/JavaScript-权威指南/","text":"","tags":[]},{"title":"Android + Linux + Jenkins + React Native 自动化构建","date":"2017-09-20T09:55:07.000Z","path":"2017/09/20/Android-Linux-Jenkins-自动化构建/","text":"环境配置因为公司给的服务器，没有任何配置，我们需要从头开始配置。 连接服务器本人用 Mac 1ssh &lt;用户名&gt;@&lt;ip地址&gt; -p &lt;端口&gt; 替换&lt;&gt;及其对应内容，没有端口可以不写。如需密码会要求输入，照此操作就可。 服务器系统1ping &lt;ip地址&gt; 得到 ttl = 64 判断系统为 Linux Git 安装配置CentOS 系统 使用 yum 安装 123456yum install git // 安装git –version // 查看安装是否成功git config --global user.name &quot;用户名&quot; // 配置用户名git config --global user.email &quot;邮箱&quot; // 配置邮箱ssh-keygen -t rsa -b 4096 -C &quot;邮箱&quot; // 生成公钥，三次握手直接 enter 默认配置cat ~/.ssh/id_rsa.pub // 复制公钥 公司使用 gitolite 搭建的 git 相关文章大家可以自己搜索。把生成的公钥添加到 git，配置相应权限。 JDK 安装配置12su -c &quot;yum install java-1.8.0-openjdk&quot; // 安装java -version // 检查是否安装 openjdk 下载 Jenkins 安装123sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.reposudo rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.keysudo yum install jenkins Jenkins 安装Start/Stop 命令 12sudo service jenkins start/stop/restartsudo chkconfig jenkins on SDK 安装配置123456789101112131415161718192021222324252627// 基础包wget http://dl.google.com/android/android-sdk_r24.4.1-linux.tgz// 解压tar -zxvf android-sdk_r24.4.1-linux.tgz// 进到tools目录cd android-sdk-linux/tools// 查看可见sdk版本./android list sdk -a// 版本前面会有序号 [-a 列出所有sdk版本] [-u 无ui模式] [-t 指定安装版本]./android update sdk -a -u -t [序号]// 指定版本多个安装android update sdk -u --all --filter 1,2,3// 安装完成后此时我们在 .../tools 目录下, 获取当前 sdk 路径cd .. &amp;&amp; pwd// 配置 ANDROID_HOMEvim /etc/profile// 加上export ANDROID_HOME=&quot;你的sdk路径&quot;// 立即生效source /etc/profile node 配置123456789// 安装make及gcc,gcc-c++编译器yum install -y gcc-c++ make// 获取源码curl -sL https://rpm.nodesource.com/setup_6.x | sudo -E bash -// 安装yum install nodejs// 查看版本node -vnpm -v React Native 环境配置RN 官网 1npm install -g react-native-cli 这里记住 Android SDK Build-Tools 版本为 23.0.1版本具体信息安装方式参见 上面 SDK 配置 Jenkins 配置// 打开 jenkins 默认配置 这里可以更改配置 比如更改 Java 环境配置 1vi /etc/default/jenkins // 查看 jenkins 打印记录 可以看到秘钥 1vi /var/log/jenkins/jenkins.log 本地使用的 gitolite 需要和 JenkinsJenkins 和 Gitolite 关联 1sudo -u jenkins ssh-keygen","tags":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/tags/技术/"},{"name":"Android","slug":"Android","permalink":"http://yoursite.com/tags/Android/"},{"name":"Jenkins","slug":"Jenkins","permalink":"http://yoursite.com/tags/Jenkins/"},{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"},{"name":"React Native","slug":"React-Native","permalink":"http://yoursite.com/tags/React-Native/"}]},{"title":"《白银时代》未来是银色的","date":"2017-06-26T07:27:35.000Z","path":"2017/06/26/《白银时代》未来是银色的/","text":"未来是银色的？是的，现在是银色的。 王小波的时代三部曲，大二的时候就买了。我还记得我留下两本，《黑铁时代》和《白银时代》，《黄金时代》送人了。买的时候好奇呀，总是听说王小波，书牛逼，人更牛逼，一定要看看。买是买了，看了几张看不下去了。有种看《百年孤独》的感觉，那种天马行空的跳跃，荒诞和混沌的故事，让当时的我脑袋昏沉。 现在想想，我很奇怪我当时的状态，初中的时候都会去啃《西游记》和《水浒传》原著，大学时的我，怎么仿佛丧失了阅读能力。幸好在工作几年后，慢慢明白了，读书的重要性，开始重拾读书的能力。 没想到，沉下心来读《白银时代》，越读越是绝望与悲凉。未来是银色的，那时的小说家不会写小说；历史学家不知历史，因为历史要为革命服务；哲学家的证件也保不得平安；画家一定要解释自己画的什么，解释不清要去砸碱劳动改造。 每一个故事都在实实在在的发生着，数盲症越来越多，传染性越来越强。老大哥式的人物，在受着“鞭刑”，“公司”的力量无处不在，安置着各种人。随着技术的进步，镣铐越来越多随处可见，镣铐的花样也越来越漂亮，甚至变成了装饰品。 很想知道，王小波假如活到现在会怎样？活在这个银色的世界会怎样？他是会直挺挺的战斗，直至死去。还是会从“数盲症”那里弄到签证，远离海外。还是…… 现在是银色的，那未来呢？云计算 + 大数据 + AI ，这些是未来，如果这些是银色的呢？ BIG BROTHER IS WATCHING YOU.","tags":[{"name":"文学","slug":"文学","permalink":"http://yoursite.com/tags/文学/"}]},{"title":"React Native 构建跨平台APP","date":"2017-06-22T08:21:53.000Z","path":"2017/06/22/React-Native-构建跨平台APP/","text":"想要了解更多项目内容，请点击RN-Gank，欢迎来骚扰。 初衷最初想开始这个项目，是因为想做个有意思的东西，放到 GitHub 上面。也是想锻炼自己，想完成一个产品，从有想法开始到初版完成，这样一个过程。 产品方向 阅读类 阅读类 APP 简单的呈现更多内容 API 选择 http://gank.io/api 的 API 简洁且有每日福利，在此先感谢 gank 提供 API。 交互逻辑 采取主流的 TabBar + ListView 形式，简洁高效展示内容。 UI 黑白灰素雅冷淡风。 以上是整个产品初期的思考总结 实践问题与解决交互与设计 （一） 从开始确定阅读类 APP 就要考虑产品的最终形态，到应用市场下载了几个主流的阅读了 APP，感觉都不是很喜欢，然后搜索一些比较有设计感的 APP，看人家 APP 亮点。 最终确定，RN-Gank 需要简洁、高效和素雅的产品风格。 当我们着手去做的时候才发现，没有设计师真是挺痛苦的（当然没有产品经理真心爽）。美观优雅的布局，需要优秀设计师的支持才能做到。 写布局样式的过程中，只能边写边调，当然最终也做到了简洁美观 🙂。 应用技术 （一） 应用的架构选取，首先确立 React Navigation 导航，React Native 最初提供两种导航方式，但这两种都存在各种的设计缺陷。 得益于 React 社区的活跃，第三方组织和个人都提供了较好的导航方案，其中 React Community 提供的 React Navigation 是官方推荐之一。多方比较，这里选取的也是这种方案，具体的比较过程这里就不赘述了。 （二） 数据的流动是整个 APP 非常核心的部分，Redux 为 React 提供的全家桶是不二之选，且和 React Navigation 的搭配如丝般顺滑。同时在数据管理中引入了 Immutable 不可变对象，很好的优化了性能。 开发的整个过程，当然遇到了很多小问题，这里就不一一细说了。 总结这篇文章比较简陋，肯定没法详细讲述，整个项目的过程。后续肯定有针对性的文章，把每个点抽出来细细的讲。 欢迎关注微信公众号: song_say个人博客: 宋公子的博客GitHub: DavidSongzw知乎: 行走着的宋公子","tags":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/tags/技术/"},{"name":"Android","slug":"Android","permalink":"http://yoursite.com/tags/Android/"},{"name":"React Native","slug":"React-Native","permalink":"http://yoursite.com/tags/React-Native/"},{"name":"iOS","slug":"iOS","permalink":"http://yoursite.com/tags/iOS/"}]},{"title":"关于我","date":"2017-04-13T09:48:44.000Z","path":"2017/04/13/关于我/","text":"欢迎关注微信公众号: song_say个人博客: 宋公子的博客GitHub: DavidSongzw知乎: 行走着的宋公子","tags":[{"name":"关于我","slug":"关于我","permalink":"http://yoursite.com/tags/关于我/"}]},{"title":"Hexo搭建个人博客(Mac)","date":"2017-04-13T07:49:15.000Z","path":"2017/04/13/Hexo搭建个人博客-Mac/","text":"Hexo 介绍Hexo 是一个简单、快速和功能强大的博客框架。你可以使用 MD 或者其他语言书写，然后一键生成静态页面。 安装准备 Node.js Git GitHub 配置 Node图形化安装 下载地址下载安装就好了。 命令行安装 命令行安装命令地址 Using Homebrew:慢的话请科学上网 1brew install node Using MacPorts: 123ort install nodejs&lt;major version&gt;//例如port install nodejs7 Using pkgsrc: 安装二进制包: 1pkgin -y install nodejs 或者手动构建 1cd pkgsrc/lang/nodejs &amp;&amp; bmake install 配置 Git Mac 安装 Xcode 后自带 Git没有的话,只用安装 Command Line Tools 就可以了 1xcode-select --install 图形化 Git下载地址 配置 GitHub 注册 GitHub 账号并建立仓库，仓库命和用户名必须一致(踩过不一致的坑…)，比如我的地址为：https://github.com/DavidSongzw/DavidSongzw.github.io.git 配置 git 用户名和密码 12git config --global user.email \"你的邮箱\"git config --global user.name \"你的名字\" 生成 SSH 公钥 1234567cd ~/.ssh // 检查是否已经有公钥，有的话执行下面三个命令mkdir key_backupcp id_rsa* key_backuprm id_rsa*// 然后执行生成新的公钥ssh-keygen -t rsa -C “你的邮箱地址” // 和GitHub上邮箱一致 添加 SSH 公钥 在.ssh 下看到 id_rsa.pub，打开文件复制编码，按照下面步骤添加：Account settings -&gt; SSH Keys -&gt; Add SSH Key 验证是否成功 1ssh -T git@github.com 安装 Hexo 全局安装 1npm install -g hexo-cli 初始化 1234567hexo init &lt;folder&gt; //folder 博客目录名称cd &lt;folder&gt;npm install// 例如hexo init blog //folder 博客目录名称cd blognpm install 目录结构 12345678├── _config.yml├── node_modules├── package.json├── scaffolds├── source ├── _posts └── _drafts or assets or ...└── themes 配置 Hexo1. _config.yml下面讲的是一些常见配置 Site 123456title: 博客名字subtitle: 博客副标题description: 描述author: 你的名字email: 邮箱keywords: 自己的一些关键词 Deployment 1234deploy: type: git // 类型git repo: https://github.com/DavidSongzw/DavidSongzw.github.io.git // 地址 branch: master // 所在分支 注意安装插件： 1npm install hexo-deployer-git --save 2. node_modules编译出来的文件不用关心。 3. package.json整个项目的配置信息（比如名称、版本、许可证等元数据）。 4. scaffolds当我们去创建新的帖子的时候，会先在此目录寻找是否存在，不存在才会创建新的文件。 5. source5.1 _posts创建的帖子在此存放。 5.2 _drafts or assets or …根据配置不同可能不存在此目录，比如我的配置中有 assets 这个目录，用于放置一些写作资料，比如图片。 6. themes（主题）我的主题是yilia,详细配置参照作者 litten 的 主题 GitHub 和 litten 博客配置样本，这里就不啰嗦了。 Hexo 命令123456789101112hexo new \"postName\" #新建文章hexo new page \"pageName\" #新建页面hexo generate #生成静态页面hexo server #开启本地（localhost:4000，'ctrl + c'关闭server）hexo deploy #部署到GitHub简写hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 新建文章12// 例如我创建这篇博客hexo new &quot;Hexo搭建个人博客(Mac)&quot; 自动生成的内容如下： --- title: Hexo搭建个人博客(Mac) date: 2017-04-13 15:49:15 tags: --- 更改后如下： --- title: Hexo搭建个人博客(Mac) date: 2017-04-13 15:49:15 categories: 博客 tags: [Hexo, 个人博客] --- 需要注意的是加多个便签，请按照上面格式添加。 书写语法不论是程序还是文字工作者，都建议使用 Markdown 语法，可参考如下链接学习。Markdown 语法 wiki 欢迎关注微信公众号: song_say个人博客: 宋公子的博客GitHub: DavidSongzw知乎: 行走着的宋公子","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"个人博客","slug":"个人博客","permalink":"http://yoursite.com/tags/个人博客/"}]},{"title":"小程序的小思考","date":"2017-04-09T14:47:11.000Z","path":"2017/04/09/小程序的小思考/","text":"连接一切微信战略层是想微信连接一切。 订阅号已经超预期的完成了，连接线上的服务，但是体验感不好，继而微信推出了服务号。 而服务号存在感一直很低，能说的出来的服务号，也就招商银行做的不错。小程序的推出就顺理成章了，承接服务号线上服务功能，连接线下场景。 在微信公开课上，张小龙举了这样两个小程序的例子： 在公交车站扫一下二维码，就知道下一班车什么时候到。在公共汽车站，扫一下二维码就可以购票，完全不用排队。 一直提及的都是线下场景，这也显示了微信对于连接一切的野心。 为何是线下线上APP的获客成本已经居高不下，成本最高的互联网金融行业，已经过千甚至于逼近上万。 线上已经高居不下，线下又是一片未开发的处女地，这显然是微信想吃掉的市场。 而且在线下相对封闭的环境下，用户的注意力不会线上一样，很容易被吸引，一条微信，一条推送，就可能吸引走用户的注意力。 举两个例子： 分众传媒 可能很多人都不知道分众传媒，但是绝大部分白领都天天接触，办公楼宇电梯里外的广告牌，很大部分都来自于分众传媒。在这种密闭空间下，用户对广告的接受度要高上很多，甚至愿意看广告。这是线下场景的极好运用，我们也相信，线下场景可挖掘部分远远不止于此。 古北水镇 这个清明节去了古北水镇，购票大厅排队的人很多。而微信购票流程如下： 整个过程如丝般顺畅，不用浪费排队买票和检票时间。 这已经极大的方便了游客，我们来看看使用小程序，这个过程是怎样的。 看似只少了关注和点击跳转，可是这里是最容易流失用户的关键点，而且小程序的优化要远超普通web页面。 用完即走张小龙一直在强调用完即走，这让开发者很担心，用户不在自己的产品里面停留，那怎么样留住用户呢。我们反过来想，好的产品才会有回头客，如果用户用的很爽的话，下次还会回来的。 小程序的新增功能1、 小程序支持模糊搜索 2、万众期待的“附近”功能，即将上线 附近功能虽然还没正式上线吗，却也是板上钉钉。该功能可以说是千呼万唤，它也几乎成为了零售领域最期待的一项功能：用户进入微信小程序界面后，可以直接看到所在地周围一定范围的所有“小程序”，包括实体店、服务店、商场等。 3、APP和小程序有了新的连接方式 在微信中分享App页面直接唤醒小程序，即APP链接分享到微信，点开就是小程序。 4、小程序兼容线下二维码 原有二维码也能进小程序如果你是一家商户，不仅可以通过小程序后台生成新的二维码，也可以将线下已经铺设的二维码经过后台配置，让顾客扫描原有二维码就可以直接打开小程序。 5、小程序与公众号新增三种连接方式 1)公众号可以把关联小程序放在自定义菜单中，用户点击可直达小程序。 2)公众号模版消息可打开相关小程序，即公众号运营者可以向用户推送关联小程序页面。 3)公众号绑定相关小程序时，可选择给粉丝下发通知，即公众号运营者可以通知粉丝，“我绑定了这个小程序”，粉丝点击消息就可以打开小程序，且该消息不占用原有群发条数。 6、降低开发门槛——个人可开发 启示 我们的微信商城比APP使用率高很多，小程序比微信 web页面体验好很多。可以很好的替代现在的微信商城，并提供更好的服务。 微信新开放的功能，可以让用户无缝进入小程序，弱化了推广。 二维码的扫码进入指定页面功能，在线下场景有极大想象空间。比如用户想要进入冻品列表，直接扫码进入，极大的缩短了用户购买流程。 消息推送功能，是极大的利器，可以配合运营更好的做活动。 小程序、订阅号、服务号、企业号必然会组成一个大的微信生态。就像 App Store ，因为微信天然与用户一直保持连接。微信商城和小程序起到联动的效应，在微信生态中发展壮大。 本文受到 可能吧 微信公众号文章启发，大家可以关注 knbknb 。如有不妥，表示歉意并删除。 欢迎关注微信公众号: song_say个人博客: 宋公子的博客GitHub: DavidSongzw知乎: 行走着的宋公子","tags":[{"name":"微信","slug":"微信","permalink":"http://yoursite.com/tags/微信/"},{"name":"小程序","slug":"小程序","permalink":"http://yoursite.com/tags/小程序/"}]}]